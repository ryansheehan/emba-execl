// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  profile           Profile?
  googleSub         String    @unique
  todos             Todo[]
  logs              ExecLog[]
  quotesSeen        MotivationalQuoteSeen[]
}

model Profile {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  email             String  
  picture           String?
  givenName         String    @map(name: "given_name")
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @unique
}

model Todo {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  title             String
  priority          Int
  topLogs           TopTodo[] @relation("TopTodos")
  createdInLog      ExecLog   @relation("TodosCreatedInLog", fields: [createdInLogId], references: [id])
  createdInLogId    Int
  completedInLog    ExecLog?  @relation("TodosCompletedInLog", fields: [completedInLogId], references: [id])
  completedInLogId  Int?
  user              User      @relation(fields: [userId], references: [id])
  userId            String
}

model ExecLog {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")  
  period            Int
  startDate         DateTime
  endDate           DateTime?
  showUp            String
  speakUp           String
  syncUp            String
  lessonsLearned    String?
  progressMade      String?
  progressNeeded    String?
  emotionHigh       String?
  emotionLow        String?
  personalScore     Int?
  professionalScore Int?
  organizationScore Int?
  topTodos          TopTodo[] @relation("TopTodos")
  createdTodos      Todo[]    @relation("TodosCreatedInLog")
  completedTodos    Todo[]    @relation("TodosCompletedInLog")
  user              User      @relation(fields: [userId], references: [id])
  userId            String
}

model TopTodo {  
  todoId            Int
  execLogId         Int
  todo              Todo      @relation("TopTodos", fields: [todoId], references: [id])
  execLog           ExecLog   @relation("TopTodos", fields: [execLogId], references: [id])

  @@id([todoId, execLogId])
}

model MotivationalQuote {
  id                Int       @id @default(autoincrement())
  quote             String
  usersSeen         MotivationalQuoteSeen[]
}

model MotivationalQuoteSeen {
  quoteId           Int
  userId            String
  quote             MotivationalQuote @relation(fields: [quoteId], references: [id])
  user              User              @relation(fields: [userId], references: [id])

  @@id([quoteId, userId])
}
