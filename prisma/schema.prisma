generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String                  @id @default(uuid())
  createdAt        DateTime                @default(now()) @map("created_at")
  updatedAt        DateTime                @updatedAt @map("updated_at")
  googleSub        String                  @unique
  currentExecLogId Int?
  logs             ExecLog[]
  quotesSeen       MotivationalQuoteSeen[]
  profile          Profile?
  todos            Todo[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String
  picture   String?
  givenName String   @map("given_name")
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Todo {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  position      Int
  title         String
  deleted       Boolean  @default(false)
  completedInId Int?
  userId        String
  completedIn   ExecLog? @relation(fields: [completedInId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId, position])
}

model ExecLog {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  closed            DateTime?
  showUp            String?
  speakUp           String?
  syncUp            String?
  lessonsLearned    String?
  progressMade      String?
  progressNeeded    String?
  emotionHigh       String?
  emotionLow        String?
  personalScore     Int?
  professionalScore Int?
  organizationScore Int?
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  completedTodos    Todo[]

  @@index([userId, createdAt(sort: Desc)])
}

model MotivationalQuote {
  id                Int               @id @default(autoincrement())
  quote             String
  attribution       String
  usersSeen         MotivationalQuoteSeen[]
}

model MotivationalQuoteSeen {
  quoteId           Int
  userId            String
  quote             MotivationalQuote @relation(fields: [quoteId], references: [id])
  user              User              @relation(fields: [userId], references: [id])

  @@id([quoteId, userId])
}
