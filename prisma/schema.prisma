// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  profile           Profile?
  googleSub         String    @unique
  currentExecLogId  Int?
  todos             Todo[]
  logs              ExecLog[]
  quotesSeen        MotivationalQuoteSeen[]
}

model Profile {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  email             String  
  picture           String?
  givenName         String    @map(name: "given_name")
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @unique
}

model Todo {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  position          Int
  title             String
  deleted           Boolean   @default(false)
  completedIn       ExecLog?  @relation(fields: [completedInId], references: [id])
  completedInId     Int   
  user              User      @relation(fields: [userId], references: [id])
  userId            String    

  @@index([userId])
}

model ExecLog {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  closed            DateTime?
  showUp            String?
  speakUp           String?
  syncUp            String?
  lessonsLearned    String?
  progressMade      String?
  progressNeeded    String?
  emotionHigh       String?
  emotionLow        String?
  personalScore     Int?
  professionalScore Int?
  organizationScore Int?
  completedTodos    Todo[]
  user              User      @relation(fields: [userId], references: [id])
  userId            String

  @@index([userId, createdAt(sort: Desc)])
}

model MotivationalQuote {
  id                Int       @id @default(autoincrement())
  quote             String
  usersSeen         MotivationalQuoteSeen[]
}

model MotivationalQuoteSeen {
  quoteId           Int
  userId            String
  quote             MotivationalQuote @relation(fields: [quoteId], references: [id])
  user              User              @relation(fields: [userId], references: [id])

  @@id([quoteId, userId])
}
